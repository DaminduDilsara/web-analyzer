// Code generated by MockGen. DO NOT EDIT.
// Source: internal/web_analyzer_utils/web_analyzer_utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebAnalyzerUtils is a mock of WebAnalyzerUtils interface.
type MockWebAnalyzerUtils struct {
	ctrl     *gomock.Controller
	recorder *MockWebAnalyzerUtilsMockRecorder
}

// MockWebAnalyzerUtilsMockRecorder is the mock recorder for MockWebAnalyzerUtils.
type MockWebAnalyzerUtilsMockRecorder struct {
	mock *MockWebAnalyzerUtils
}

// NewMockWebAnalyzerUtils creates a new mock instance.
func NewMockWebAnalyzerUtils(ctrl *gomock.Controller) *MockWebAnalyzerUtils {
	mock := &MockWebAnalyzerUtils{ctrl: ctrl}
	mock.recorder = &MockWebAnalyzerUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebAnalyzerUtils) EXPECT() *MockWebAnalyzerUtilsMockRecorder {
	return m.recorder
}

// DetectHTMLVersion mocks base method.
func (m *MockWebAnalyzerUtils) DetectHTMLVersion(ctx context.Context, body string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectHTMLVersion", ctx, body)
	ret0, _ := ret[0].(string)
	return ret0
}

// DetectHTMLVersion indicates an expected call of DetectHTMLVersion.
func (mr *MockWebAnalyzerUtilsMockRecorder) DetectHTMLVersion(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectHTMLVersion", reflect.TypeOf((*MockWebAnalyzerUtils)(nil).DetectHTMLVersion), ctx, body)
}

// IsLinksAccessible mocks base method.
func (m *MockWebAnalyzerUtils) IsLinksAccessible(ctx context.Context, links []string, base *url.URL) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLinksAccessible", ctx, links, base)
	ret0, _ := ret[0].(int)
	return ret0
}

// IsLinksAccessible indicates an expected call of IsLinksAccessible.
func (mr *MockWebAnalyzerUtilsMockRecorder) IsLinksAccessible(ctx, links, base interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLinksAccessible", reflect.TypeOf((*MockWebAnalyzerUtils)(nil).IsLinksAccessible), ctx, links, base)
}
